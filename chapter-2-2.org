#+TITLE: SICP 2.2
#+STARTUP: overview
#+STARTUP: indent
#+PROPERTY: header-args :noweb yes
#+PROPERTY: header-args:racket :lang racket

* Preset
To execute code blocks in this file, you need ~ob-racket~ installed.

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
(use-package racket-mode)
(use-package ob-racket
  :load-path "~/.emacs.d/packages"
  :after org
  :pin manual
  :config
  (append '((racket . t) (scribble . t)) org-babel-load-languages))
#+END_SRC

#+RESULTS:
: t

#+NAME: nil
#+BEGIN_SRC racket
(define nil '())
#+END_SRC

#+RESULTS: nil

* Exercise 2.17                                                      :solved:
** Answer
#+BEGIN_SRC racket :lang racket
(define (last-pair list)
  (if (null? (cdr list))
      (car list)
      (last-pair (cdr list))))

(last-pair (list 1 2 3 4))
#+END_SRC

#+RESULTS:
: 4

* Exercise 2.18                                                      :solved:
** Answer
#+BEGIN_SRC racket :lang racket
<<nil>>

(define (reverse-iter list result)
  (cond [(null? list) result]
        [(null? (cdr list)) (cons (car list) result)]
        [else (reverse-iter
	       (cdr list) 
	       (cons (car list) result))]))

(define (reverse list)
  (reverse-iter list nil))

(reverse (list 1 2 3 4 5))
#+END_SRC

#+RESULTS:
| 5 | 4 | 3 | 2 | 1 |

* Exercise 2.19
Consider the change-counting program of Section 1.2.2. It would
be nice to be able to easily change the currency used by the
program, so that we could compute the number of ways to change a
British pound, for example. As the program is written, the
knowledge of the currency is distributed partly into the
procedure ~first-denomination~ and partly into the procedure
~count-change~ (which knows that there are five kinds of U.S.
coins). It would be nicer to be able to supply a list of coins
to be used for making change.

We want to rewrite the procedure cc so that its second argument
is a list of the values of the coins to use rather than an
integer specifying which coins to use. We could then have lists
that defined each kind of currency:

#+BEGIN_SRC racket :lang racket
(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))
#+END_SRC

We could then call cc as follows:

#+BEGIN_SRC racket :lang racket
(cc 100 us-coins)
#+END_SRC

To do this will require changing the program =cc= somewhat. It
will still have the same form, but it will access its second
argument differently, as follows:

#+BEGIN_SRC racket :lang racket
(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination
                 coin-values))
            (cc (- amount
                   (first-denomination
                    coin-values))
                coin-values)))))
#+END_SRC

Define the procedures ~first-denomination~, ~except-first-
denomination~, and ~no-more?~ in terms of primitive operations
on list structures. Does the order of the list ~coin-values~
affect the answer produced by ~cc~? Why or why not?

* Exercise 2.20                                                      :solved:
** Answer
#+BEGIN_SRC racket
(define (same-parity-iter parity lst)
  (cond [(empty? lst) lst]
        [(eq? (remainder (car lst) 2) parity)
         (cons (car lst) (same-parity-iter parity (cdr lst)))]
        [else (same-parity-iter parity (cdr lst))]))

(define (same-parity . l)
  (same-parity-iter (remainder (car l) 2) l))

(same-parity 1 2 3 4 5)
#+END_SRC

#+RESULTS:
| 1 | 3 | 5 |

* Exercise 2.21                                                      :solved:
** Answer
#+BEGIN_SRC racket 
(define (square-list items)
  (if (null? items)
      '()
      (cons (* (car items) (car items)) (square-list (cdr items)))))

(square-list (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 |

#+BEGIN_SRC racket 
(define (square-list items)
  (map (lambda (n) (* n n)) items))

(square-list (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 |

* Exercise 2.22                                                      :solved:
** Answer
Because when you do ~(cons (square (car things)) answer)~, you
are putting ~(square (car things))~ to the head of answer. It
will act like a 'FILO' stack.

For the second program, ~answer~ is a list, however
~(square (car things))~ is a number, ~(cons list number)~
creates a structure like ~(((nil . 1) . 4) . 9)~, which is not
a list.

* Exercise 2.23                                                      :solved:
** Answer
#+BEGIN_SRC racket
(define (for-each f lst)
  (if (empty? lst)
      #t
      (begin
        (f (car lst))
        (for-each f (cdr lst)))))

(for-each (lambda (x) (display x)) (list 57 321 88))
#+END_SRC

#+RESULTS:
: 5732188#t

* Exercise 2.24                                                      :solved:
** Answer
The output is:
#+BEGIN_SRC racket :lang racket
(1 . ((2 . ((3 . (4 . nil)) . nil) ) . nil)
#+END_SRC

The box and pointer graph:
#+BEGIN_VERSE
[ 1 | -] -> [ ↓ | nil ]
            [ 2 | -] -> [ ↓ | nil ]
                        [ 3 | -] -> [ 4 | nil]
#+END_VERSE

The tree graph:
#+BEGIN_VERSE
 .
 |-+
 1 |-+-+
   2 | |
     3 4
#+END_VERSE 

* Exercise 2.25                                                      :solved:
** Answer
#+BEGIN_SRC racket
(define (solve l)
  (cadr (caddr l)))

(solve (list 1 3 (list 5 7) 9))
#+END_SRC

#+RESULTS:
: 7

#+BEGIN_SRC racket
(define (solve l)
  (car (car l)))

(solve (list (list 7)))
#+END_SRC

#+RESULTS:
: 7

#+BEGIN_SRC racket :lang racket
(define (solve l)
  (cadr (cadr (cadr (cadr (cadr (cadr l)))))))

(solve (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))
#+END_SRC

#+RESULTS:
: 7

* Exercise 2.26                                                      :solved:
** Preset
#+NAME: e-2-26-a
#+BEGIN_SRC racket
(define x (list 1 2 3))
(define y (list 4 5 6))
#+END_SRC

#+NAME: e-2-26-b
#+BEGIN_SRC racket
(append x y)
(cons x y)
(list x y)
#+END_SRC

** Answer
The output is:

#+BEGIN_SRC racket
(list 1 2 3 4 5 6)
((list 1 2 3) . (list 4 5 6))
((list 1 2 3) . ((list 4 5 6) . nil))
#+END_SRC

To check it:

#+BEGIN_SRC racket :lang racket :noweb yes
<<e-2-26-a>>
(append x y)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 |

#+BEGIN_SRC racket :lang racket :noweb yes
<<e-2-26-a>>
(cons x y)
#+END_SRC

#+RESULTS:
| (1 2 3) | 4 | 5 | 6 |

#+BEGIN_SRC racket :lang racket :noweb yes
<<e-2-26-a>>
(list x y)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |
| 4 | 5 | 6 |

* Exercise 2.27                                                      :solved:
** Answer
#+BEGIN_SRC racket
(define (reverse-iter lst reversed)
  (cond [(empty? lst) reversed]
        [(empty? (cdr lst))
         (if (pair? (car lst))
             (cons (reverse-iter (car lst) '()) reversed)
             (cons (car lst) reversed))]
        [else
         (if (pair? (car lst))
             (reverse-iter (cdr lst) 
                           (cons (reverse-iter (car lst) '()) reversed))
             (reverse-iter (cdr lst) (cons (car lst) reversed)))]))

(define (deep-reverse lst) (reverse-iter lst '()))

(deep-reverse (list 1 (list 2 3) 4 5 (list 6 7 8)) )
#+END_SRC

#+RESULTS:
| (8 7 6) | 5 | 4 | (3 2) | 1 |

* Exercise 2.28                                                      :solved:
** Answer
#+BEGIN_SRC racket
(define (fringe-iter tree result)
  (cond [(empty? tree) result]
        [(pair? (car tree))
         (append (append result (fringe-iter (car tree) '())) 
                 (fringe-iter (cdr tree) '()))]
        [else (fringe-iter (cdr tree) (append result (list (car tree))))]))

(define (fringe tree)
  (fringe-iter tree '()))

(fringe (list (list 1 2) 3 (list 4 5)))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 |

* Exercise 2.29                                                      :solved:
** Preset
#+NAME: e-2-29-a
#+BEGIN_SRC racket
(define (make-mobile left right)
  (list left right))
#+END_SRC

#+NAME: e-2-29-b
#+BEGIN_SRC racket
(define (make-branch length structure)
  (list length structure))
#+END_SRC

#+NAME: e-2-29-c
#+BEGIN_SRC racket
(define (make-mobile left right) (cons left right))
(define (make-branch length structure)
  (cons length structure))
#+END_SRC
** Answer
*** a
#+NAME: e-2-29-d
#+BEGIN_SRC racket
(define (left-branch mob) (car mob))
(define (right-branch mob) (cadr mob))
(define (branch-length brn) (car brn))
(define (branch-structure brn) (cadr brn))
#+END_SRC

*** b
#+NAME: e-2-29-e
#+BEGIN_SRC racket
<<e-2-29-a>>
<<e-2-29-b>>
<<e-2-29-d>>

(define (brn-weight brn)
  (let ([strc (branch-structure brn)])
    (if (number? strc)
        strc
        (total-weight strc))))

(define (total-weight mob)
  (+
   (brn-weight (left-branch mob))
   (brn-weight (right-branch mob))))

(total-weight
 (make-mobile
  (make-branch 1 2)
  (make-branch
   3
   (make-mobile (make-branch 7 8) (make-branch 9 10)))))
#+END_SRC

#+RESULTS: e-2-29-e
: 20

*** c
#+NAME: e-2-29-f
#+BEGIN_SRC racket
<<e-2-29-e>>

(define (brn-balanced? brn)
  (let ([strc (branch-structure brn)])
    (if (number? strc)
        #t
        (balanced? strc))))

(define (torque brn)
  (* (branch-length brn) (brn-weight brn)))

(define (balanced? mob)
  (and
   (= (torque (left-branch mob))
      (torque (right-branch mob)))
   (brn-balanced? (left-branch mob))
   (brn-balanced? (right-branch mob))))

(balanced?
 (make-mobile
  (make-branch 1 20)
  (make-branch 2
               (make-mobile
                (make-branch 1 5)
                (make-branch 1 5)))))
#+END_SRC

#+RESULTS: e-2-29-f
: #t

*** d
I only need to change the selectors and constructors, which
are ~left-branch~, ~right-branch~, ~branch-length~ and
~branch-structure~ functions.

* Exercise 2.30                                                      :solved:
** Answer
Implement directly:

#+BEGIN_SRC racket
(define (square n) (* n n))

(define (square-tree tree)
  (cond [(empty? tree) '()]
        [(not (pair? tree)) (square tree)]
        [else (cons (square-tree (car tree))
                    (square-tree (cdr tree)))]))

(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
#+END_SRC

#+RESULTS:
| 1 | (4 (9 16) 25) | (36 49) |

Implement with ~map~:

#+BEGIN_SRC racket
(define (square n) (* n n))

(define (square-tree tree)
  (map (lambda (sub)
         (if (pair? sub)
             (square-tree sub)
             (square sub)))
       tree))

(square-tree
 (list 1
       (list 2 (list 3 4) 5)
       (list 6 7)))
#+END_SRC

#+RESULTS:
| 1 | (4 (9 16) 25) | (36 49) |

* Exercise 2.31                                                      :solved:
** Preset
#+NAME: e-2-31-a
#+BEGIN_SRC racket
(define (square-tree tree) (tree-map square tree))
#+END_SRC
** Answer
#+BEGIN_SRC racket
<<e-2-31-a>>

(define (square n) (* n n))

(define (tree-map f tree)
  (map (lambda (sub)
         (if (pair? sub)
             (tree-map f sub)
             (f sub)))
       tree))

(square-tree (list 1 2 (list 3 4)))
#+END_SRC

#+RESULTS:
| 1 | 4 | (9 16) |

* Exercise 2.32                                                      :solved:
** Answer

#+BEGIN_SRC racket
(define nil '())

(define (subsets s)
  (if (null? s)
      (list nil)
      (let ([rest (subsets (cdr s))])
        (append rest (map (lambda (n) (cons (car s) n)) rest)))))

(subsets (list 1 2 3))
#+END_SRC

#+RESULTS:
|---+---+---|
| 3 |   |   |
| 2 |   |   |
| 2 | 3 |   |
| 1 |   |   |
| 1 | 3 |   |
| 1 | 2 |   |
| 1 | 2 | 3 |

* Exercise 2.33                                                      :solved:
** Answer
Just put the definition of ~accumulate~ here:

#+NAME: accumulate
#+BEGIN_SRC racket
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
#+END_SRC

#+BEGIN_SRC racket
<<accumulate>>

(define (map p sequence)
  (accumulate
   (lambda (x y) (cons (p x) y))
   '()
   sequence))

(map (lambda (n) (+ 1 n)) (list 1 2 3))
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 |

#+BEGIN_SRC racket
<<accumulate>>

(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(append (list 1 2) (list 3 4))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |

#+BEGIN_SRC racket
<<accumulate>>

(define (length sequence)
  (accumulate (lambda (e n) (+ 1 n)) 0 sequence))

(length (list 1 2 3 4))
#+END_SRC

#+RESULTS:
: 4

* Exercise 2.34                                                      :solved:
** Answer

#+BEGIN_SRC racket
<<accumulate>>

(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
                (+ this-coeff (* higher-terms x)))
              0
              coefficient-sequence))

(horner-eval 2 (list 1 3 0 5 0 1))
#+END_SRC

#+RESULTS:
: 79

* Exercise 2.35                                                      :solved:
** Answer

#+BEGIN_SRC racket
<<accumulate>>

(define (count-leaves t)
  (accumulate
   (lambda (x y) (+ x y))
   0
   (map (lambda (n) (if (pair? n) (count-leaves n) 1)) t)))

(count-leaves (list 1 2 3 (list 4 5)))
#+END_SRC

#+RESULTS:
: 5

* Exercise 2.36                                                      :solved:
** Answer
#+NAME: accumulate-n
#+BEGIN_SRC racket
<<nil>>
<<accumulate>>

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

#+END_SRC

#+BEGIN_SRC racket
<<accumulate-n>>
(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(accumulate-n + 0 s)
#+END_SRC

#+RESULTS:
| 22 | 26 | 30 |

* Exercise 2.37                                                      :solved:
** Preset
#+NAME: dot-product
#+BEGIN_SRC racket
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
#+END_SRC
** Answer

#+NAME: e-2-37
#+BEGIN_SRC racket
<<accumulate-n>>
<<dot-product>>

(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))

(define (transpose mat)
  (accumulate-n cons nil mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (matrix-*-vector cols row))  m)))
#+END_SRC

#+RESULTS:
|  7 |  7 |
| 14 | 14 |

#+BEGIN_SRC racket
<<e-2-37>>
(define m (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(matrix-*-vector m (list 2 3 4 5))
#+END_SRC

#+RESULTS:
| 40 | 77 | 110 |

#+BEGIN_SRC racket
<<e-2-37>>
(define m (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(transpose m)
#+END_SRC

#+RESULTS:
| 1 | 4 | 6 |
| 2 | 5 | 7 |
| 3 | 6 | 8 |
| 4 | 6 | 9 |

#+BEGIN_SRC racket
<<e-2-37>>
(matrix-*-matrix (list (list 1 1) (list 2 2)) (list (list 3 3) (list 4 4)))
#+END_SRC

#+RESULTS:
|  7 |  7 |
| 14 | 14 |

* Exercise 2.38                                                      :solved:
** Preset
#+NAME: fold-left
#+BEGIN_SRC racket
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))
#+END_SRC
** Answer
The values are: ~3 / 2~, ~1 / 6~, ~(1 (2 (3 nil)))~,
~(((nil 1) 2) 3)~.

An ~op~ should satisfy that ~(op x y) = (op y x)~ to guarantee
that ~fold-right~ and ~fold-left~ will produce same values.

* Exercise 2.39                                                      :solved:
** Answer
#+BEGIN_SRC racket
<<nil>>
<<accumulate>>
<<fold-left>>
(define fold-right accumulate)

(define (reverse sequence)
  (fold-right (lambda (x y) (append y (list x))) nil sequence))

(reverse (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 4 | 3 | 2 | 1 |

#+BEGIN_SRC racket
<<nil>>
<<accumulate>>
<<fold-left>>
(define fold-right accumulate)

(define (reverse sequence)
  (fold-left (lambda (x y) (cons y x)) nil sequence))

(reverse (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 4 | 3 | 2 | 1 |

* Exercise 2.40                                                      :solved:
** Preset
#+NAME: flatmap
#+BEGIN_SRC racket
(define (flatmap proc seq)
  (foldr append nil (map proc seq)))
#+END_SRC

#+NAME: enumerate-interval
#+BEGIN_SRC racket
(define (enumerate-interval i j)
  (cond [(< i j) (cons i (enumerate-interval (+ i 1) j))]
        [(= i j) (cons i nil)]
        [else nil]))
#+END_SRC

** Answer
#+BEGIN_SRC racket
<<nil>>
<<accumulate>>
<<flatmap>>
<<enumerate-interval>>

(define (unique-pairs n)
  (define is (enumerate-interval 1 n))
  (flatmap (lambda (i)
             (define js (enumerate-interval 1 (- i 1)))
             (map (lambda (j) (list i j)) js)) is))

(unique-pairs 6)
#+END_SRC

#+RESULTS:
| 2 | 1 |
| 3 | 1 |
| 3 | 2 |
| 4 | 1 |
| 4 | 2 |
| 4 | 3 |
| 5 | 1 |
| 5 | 2 |
| 5 | 3 |
| 5 | 4 |
| 6 | 1 |
| 6 | 2 |
| 6 | 3 |
| 6 | 4 |
| 6 | 5 |

The definition of ~prime-sum-pairs~ can be simplified to:

#+BEGIN_SRC racket
(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum? (unique-pairs n))))
#+END_SRC

* Exercise 2.41                                                      :solved:
** Answer
#+BEGIN_SRC racket
<<nil>>
<<flatmap>>
<<enumerate-interval>>

(define (unique-triples n)
  (define is (enumerate-interval 1 n))
  (flatmap (lambda (i)
             (define js (enumerate-interval 1 (- i 1)))
             (flatmap (lambda (j)
                        (define ks (enumerate-interval 1 (- j 1)))
                        (map (lambda (k) (list i j k)) ks)) js)) is))

(define (filter-triples n s)
  (define triples (unique-triples n))
  (define (condition lst)
    (define sum (foldr + 0 lst))
    (= sum s))
  (filter condition triples))

(filter-triples 6 8)
#+END_SRC

#+RESULTS:
| 4 | 3 | 1 |
| 5 | 2 | 1 |

* Exercise 2.42                                                      :solved:
** Preset
#+NAME: queens
#+BEGIN_SRC racket
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position
                    new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
#+END_SRC

** Answer
#+BEGIN_SRC racket
(define (make-queen col row) (cons col row))
(define col-queen car)
(define row-queen cdr)

(define (check? q-a q-b)
  (define col-a (col-queen q-a))
  (define row-a (row-queen q-a))
  (define col-b (col-queen q-b))
  (define row-b (row-queen q-b))
  (define col-diff (- col-a col-b))
  (define row-diff (- row-a row-b))
  (or (= col-diff 0)
      (= row-diff 0)
      (= (abs col-diff) (abs row-diff))))

(define empty-board '())

(define times 0)

(define (adjoin-position row size positions)
  (cons (make-queen size row) positions))

(define (safe? size positions)
  (cond [(empty? positions) #t]
        [(empty? (cdr positions)) #t]
        [else (foldl
               (lambda (q result)
                 (and (not (check? q (car positions))) result))
               #t (cdr positions))]))

<<nil>>
<<flatmap>>
<<enumerate-interval>>
<<queens>>

(queens 4)
#+END_SRC

#+RESULTS:
| (4 . 3) | (3 . 1) | (2 . 4) | (1 . 2) |
| (4 . 2) | (3 . 4) | (2 . 1) | (1 . 3) |

* Exercise 2.43
* Exercise 2.44                                                      :solved:
** Answer
#+BEGIN_SRC racket
(require sicp-pict)

(define (up-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (up-split painter (- n 1))))
        (below painter (beside smaller smaller)))))

(paint (up-split einstein 3))
#+END_SRC

#+RESULTS:
: (object:image-snip% ... ...)


* Exercise 2.45                                                      :solved:
** Answer
#+BEGIN_SRC racket
(require sicp-pict)

(define (split painterA painterB)
  (define (sub-split painter n)
    (if (= n 0)
        painter
        (let ((smaller (sub-split painter (- n 1))))
          (painterA painter (painterB smaller smaller)))))
  sub-split)

(define right-split (split beside below))
(define up-split (split below beside))

(paint (right-split einstein 3))
(paint (up-split einstein 3))
#+END_SRC

#+RESULTS:
: (object:image-snip% ... ...)
: (object:image-snip% ... ...)

* Exercise 2.46                                                      :solved:
#+BEGIN_SRC racket
(define (make-vect x y) (cons x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cdr v))

(define (map-vect op)
  (lambda (a b)
    (make-vect (op (xcor-vect a) (xcor-vect b))
               (op (ycor-vect a) (ycor-vect b)))))

(define add-vect (map-vect +))
(define sub-vect (map-vect -))
(define (scale-vect s v)
  ((map-vect *) (make-vect s s) v))

(add-vect (make-vect 1 2) (make-vect 3 4))
(scale-vect 3 (make-vect 3 4))
#+END_SRC

* E 2.47                                                             :solved:
** Answer
The first implementation:
#+BEGIN_SRC racket
(define (make-frame origin edge1 edge2) (list origin edge1 edge2))

(define (origin-frame f) (car f))
(define (edge1-frame f) (cadr f))
(define (edge2-frame f) (caddr f))

(edge2-frame (make-frame 'o 'e1 'e2))
#+END_SRC

#+RESULTS:
: e2

The second implementation:
#+BEGIN_SRC racket
(define (make-frame origin edge1 edge2) (cons origin (cons edge1 edge2)))

(define (origin-frame f) (car f))
(define (edge1-frame f) (cadr f))
(define (edge2-frame f) (cddr f))

(edge2-frame (make-frame 'o 'e1 'e2))
#+END_SRC

#+RESULTS:
: e2
